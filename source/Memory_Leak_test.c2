/**********************************************************************
  Memory_Leak_test.c:

     Memory_Leak_test.c is a subroutine to check memory leak
     by monitoring actual used memory

  Log of Memory_Leak_test.c:

     20/Oct/2005  Released by T.Ozaki

***********************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <time.h>
/*  stat section */
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <dirent.h>
/*  end stat section */
#include "openmx_common.h"
#include "Inputtools.h"
 
#ifdef nompi
#include "mimic_mpi.h"
#else
#include "mpi.h"
#endif

#include "tran_prototypes.h"
#include "tran_variables.h"


typedef struct {
  char fn[YOUSO10];
} fname_type;


static int run_main(int argc, char *argv[], int numprocs0, int myid0);
static int stringcomp( const void *a, const void *b);
void Get_VSZ(int MD_iter);


void Memory_Leak_test(int argc, char *argv[]) 
{
  FILE *fp,*fp2;
  int Num_DatFiles,i;
  char operate[800];
  char fname_dat[YOUSO10];
  char fname2[YOUSO10];
  fname_type *fndat;
  char *dir;
  char *input_dir;
  char *output_file;
  DIR *dp;
  struct dirent *entry;
  int numprocs,myid;

  /* set up MPI */

  MPI_Comm_size(MPI_COMM_WORLD1, &numprocs);
  MPI_Comm_rank(MPI_COMM_WORLD1, &myid);

  /* set up input_dir and output_file */

  input_dir = "ml_example";
  output_file = "mltest.result";

  /* set ML_flag */

  ML_flag = 1;

  /* print the header */

  if (myid==Host_ID){

    printf("\n*******************************************************\n"); fflush(stdout);
    printf("*******************************************************\n"); fflush(stdout);
    printf(" Welcome to OpenMX                                     \n"); fflush(stdout);
    printf(" Copyright (C), 2002, T.Ozaki                          \n"); fflush(stdout);
    printf(" OpenMX comes with ABSOLUTELY NO WARRANTY.             \n"); fflush(stdout);
    printf(" This is free software, and you are welcome to         \n"); fflush(stdout);
    printf(" redistribute it under the constitution of the GNU-GPL.\n"); fflush(stdout);
    printf("*******************************************************\n"); fflush(stdout);
    printf("*******************************************************\n\n\n"); fflush(stdout);

    printf("\n");fflush(stdout);
    printf(" OpenMX is now in the mode to check memory leak\n"); fflush(stdout);
    printf(" by monitoring actual used memory size 'VSZ' and 'RSS'.\n"); fflush(stdout);
    printf("\n");fflush(stdout);

    /* set dir */

    dir = input_dir;

    /* count the number of dat files */

    if(( dp = opendir(dir) ) == NULL ){
      printf("could not find the directry '%s'\n",input_dir);
      MPI_Finalize();
      exit(0);
    }

    Num_DatFiles = 0;
    while((entry = readdir(dp)) != NULL){

      if ( strstr(entry->d_name,".dat")!=NULL ){ 
          
        Num_DatFiles++;
      }
    }
    closedir(dp);

    fndat = (fname_type*)malloc(sizeof(fname_type)*Num_DatFiles);

    /* store the name of dat files */

    if(( dp = opendir(dir) ) == NULL ){
      printf("could not find the directry '%s'\n",input_dir);
      MPI_Finalize();
      exit(0);
    }

    Num_DatFiles = 0;
    while((entry = readdir(dp)) != NULL){
 
      if ( strstr(entry->d_name,".dat")!=NULL ){ 

        sprintf(fndat[Num_DatFiles].fn,"%s/%s",input_dir,entry->d_name);  
        Num_DatFiles++;
      }
    }
    closedir(dp);

    /* sorting fndat */

    qsort(fndat, Num_DatFiles, sizeof(fname_type), stringcomp);  

  } /* if (myid==Host_ID) */

  sprintf(fname2,"%s",output_file);

  if (myid==Host_ID){
    fp = fopen(fname2, "r");   
    if (fp!=NULL){
      fclose(fp); 
      sprintf(operate,"%s",fname2);
      remove(operate);
    }
  }

  if (myid==Host_ID){
    printf(" %2d dat files are found in the directory '%s'.\n\n\n",Num_DatFiles,input_dir);
  }

  MPI_Bcast(&Num_DatFiles, 1, MPI_INT, Host_ID, MPI_COMM_WORLD1);

  /***********************************************************
                      start calculations
  ***********************************************************/


  for (i=0; i<Num_DatFiles; i++){

    if (myid==Host_ID){
      sprintf(fname_dat,"%s",fndat[i].fn);
    }  

    MPI_Bcast(&fname_dat, YOUSO10, MPI_CHAR, Host_ID, MPI_COMM_WORLD1);

    /* run openmx */

    argv[1] = fname_dat;
    run_main(argc, argv, numprocs, myid); 

    /* write the result to a file, mltest.result */

    if ( (fp2 = fopen(fname2,"a")) != NULL ){
      fprintf(fp2,"\n\n %4d     %-32.30s\n\n", i+1,fname_dat);
      fclose(fp2);
    }

    sprintf(operate,"cat ls_dat000004 >> %s",fname2);
    system(operate);

    sprintf(operate,"rm ls_dat000004");
    system(operate);

  } /* i */

  printf("\n\n\n\n");
  printf("Monitored VSZ and RSS can be found in a file 'mltest.result'.\n\n\n");
}



void Get_VSZ(int MD_iter)
{
  int column_VSZ,po_VSZ;
  int column_RSS,po_RSS;
  int column_CPU,po_CPU;
  int line,po_line,num;
  int i,max;

  FILE *fp,*fp1,*fp2;
  char fname0[YOUSO10];
  char fname1[YOUSO10];
  char fname2[YOUSO10];
  char tmpchar[300];
  char tmpline[300];
  char operate[800];
  double Used_CPU,Used_VSZ,Used_RSS;

  sprintf(fname0,"ls_dat000002");
  sprintf(fname1,"ls_dat000003");
  sprintf(fname2,"ls_dat000004");

  sprintf(operate,"ps uxw > %s",fname0);
  system(operate);
  
  column_VSZ = 0;
  column_RSS = 0;
  column_CPU = 0;
  po_VSZ = 0;
  po_RSS = 0;
  po_CPU = 0;
  num = 0;

  /* find the column number of VSZ, RSS, and CPU */

  if ( (fp = fopen(fname0,"r")) != NULL ){

    do {
      if (fscanf(fp,"%s",tmpchar)!=EOF){

        if (po_VSZ==0)  column_VSZ++;
        if (po_RSS==0)  column_RSS++;
        if (po_CPU==0)  column_CPU++;

        num++;

	if (strcmp(tmpchar,"VSZ")==0){
	  po_VSZ = 1;
	}

	if (strcmp(tmpchar,"RSS")==0){
	  po_RSS = 1;
	}

	if (strcmp(tmpchar,"%CPU")==0){
	  po_CPU = 1;
	}
      }

    } while ( (po_VSZ==0 || po_RSS==0 || po_CPU==0) && num<12 );

    /*
    if (po_CPU==1) {
      printf("ABC1 column_CPU=%i\n",column_CPU);
    }

    if (po_VSZ==1) {
      printf("ABC2 column_VSZ=%i\n",column_VSZ);
    }

    if (po_RSS==1) {
      printf("ABC3 column_RSS=%i\n",column_RSS);
    }
    */

    fclose(fp);
  }
  else{
    printf("Could not find %s in checking memory leak (1)\n",fname0);
  }  

  /* find the line which corresponds to the OpenMX job */

  po_line = 0;
  line = 0;

  if ( (fp = fopen(fname0,"r")) != NULL ){

    do {

      if (fgets(tmpline, 300, fp)!=NULL){

        line++; 

        if ( strstr(tmpline,"openmx ml_example/")!=NULL ){
          po_line = 1;          

          if ( (fp1 = fopen(fname1,"w")) != NULL ){
            fprintf(fp1,"%s",tmpline);
            fclose(fp1);
	  }          
          else{
            printf("Could not find %s in checking memory leak (2)\n",fname1);
          }
        }
      }
      else{
        po_line = 2;          
      }

    } while ( po_line==0 );


    /*
    if (po_line==1){
      printf("line=%3d\n",line);
    }
    */

    fclose(fp);
  }
  else{
    printf("Could not find %s in checking memory leak(3)\n",fname0);
  }  

  /* get VSZ */

  if ( (fp1 = fopen(fname1,"r")) != NULL ){

    if (column_CPU<column_VSZ)
      max = column_VSZ;
    else
      max = column_CPU;

    if (max<column_RSS) max = column_RSS;

    for (i=1; i<=max; i++){
      if (fscanf(fp1,"%s",tmpchar)!=EOF){
        if (i==column_CPU) Used_CPU = atof(tmpchar);
        if (i==column_VSZ) Used_VSZ = atof(tmpchar);
        if (i==column_RSS) Used_RSS = atof(tmpchar);
      }
    }

    fclose(fp1);
  }
  else{
    printf("Could not find %s in checking memory leak (4)\n",fname1);
  }  


  printf("Used_CPU (percent) = %6.3f\n",Used_CPU);fflush(stdout);
  printf("Used_VSZ (kbyte)   = %6ld\n", (long int)(Used_VSZ));fflush(stdout);
  printf("Used_RSS (kbyte)   = %6ld\n", (long int)(Used_RSS));fflush(stdout);


  /* write Used_CPU and Used_VSZ in a file */

  if (MD_iter==1){

    if ( (fp2 = fopen(fname2,"w")) != NULL ){
      fprintf(fp2,"                   CPU (%%)     VSZ (kbyte)    RSS (kbyte)\n");
      fprintf(fp2," MD_iter=%4d     %7.3f     %6ld         %6ld\n",
              MD_iter,Used_CPU,(long int)(Used_VSZ),(long int)(Used_RSS));
      fclose(fp2);
    }          
    else{
      printf("Could not find %s in checking memory leak (5)\n",fname2);
    }
  }
  else {
    if ( (fp2 = fopen(fname2,"a")) != NULL ){
      fprintf(fp2," MD_iter=%4d     %7.3f     %6ld         %6ld\n",
              MD_iter,Used_CPU,(long int)(Used_VSZ),(long int)(Used_RSS));
      fclose(fp2);
    }          
    else{
      printf("Could not find %s in checking memory leak (6)\n",fname2);
    }
  }

  /* delete files */

  sprintf(operate,"rm %s",fname0);
  system(operate);

  sprintf(operate,"rm %s",fname1);
  system(operate);

}



int run_main(int argc, char *argv[], int numprocs0, int myid0) 
{
  int MD_iter,i,j,po,ip;
  char fileE[YOUSO10] = ".ene"; 
  char fileDRC[YOUSO10] = ".md";
  char fileMemory[YOUSO10]; 
  char fileRestart[YOUSO10];
  char operate[200];
  double TStime,TEtime;

  /* for idle CPUs */
  int tag;
  int complete;
  MPI_Request request;
  MPI_Status  status;

  /* for measuring elapsed time */

  dtime(&TStime);

  /* allocation of CompTime */
  CompTime = (double**)malloc(sizeof(double*)*numprocs0); 
  for (i=0; i<numprocs0; i++){
    CompTime[i] = (double*)malloc(sizeof(double)*30); 
    for (j=0; j<30; j++) CompTime[i][j] = 0.0;
  }

  if (myid0==Host_ID){  
    printf("\n*******************************************************\n"); 
    printf("*******************************************************\n"); 
    printf(" Welcome to OpenMX   Ver. %s                           \n",Version_OpenMX); 
    printf(" Copyright (C), 2002-2009, T.Ozaki                     \n"); 
    printf(" OpenMX comes with ABSOLUTELY NO WARRANTY.             \n"); 
    printf(" This is free software, and you are welcome to         \n"); 
    printf(" redistribute it under the constitution of the GNU-GPL.\n");
    printf("*******************************************************\n"); 
    printf("*******************************************************\n\n"); 
  } 

  Init_List_YOUSO();
  remake_headfile = 0;
  ScaleSize = 1.2; 

  /****************************************************
                   Read the input file
  ****************************************************/

  init_alloc_first();
  CompTime[myid0][1] = readfile(argv);
  MPI_Barrier(MPI_COMM_WORLD1);

  /* initialize PrintMemory routine */

  sprintf(fileMemory,"%s%s.memory%i",filepath,filename,myid0);
  PrintMemory(fileMemory,0,"init"); 
  PrintMemory_Fix();
 
  /* initialize */
  
  init();
  fnjoint(filepath,filename,fileE);
  fnjoint(filepath,filename,fileDRC);

  /****************************************************
      SCF-DFT calculations and MD and geometrical
      optimization.
  ****************************************************/

  MD_iter = 1;

  do {

    CompTime[myid0][2] += truncation(MD_iter,1);

    if (ML_flag==1 && myid0==Host_ID) Get_VSZ(MD_iter);  

    if (Solver==4) {
      TRAN_Calc_GridBound( mpi_comm_level1, atomnum, WhatSpecies, Spe_Atom_Cut1,
                           Ngrid1, Grid_Origin, Gxyz, tv, gtv, rgtv, Left_tv, Right_tv );

      /* output: TRAN_region[], TRAN_grid_bound */
    }

    CompTime[myid0][3] += DFT(MD_iter,(MD_iter-1)%orbitalOpt_per_MDIter+1);
    if (myid0==Host_ID) iterout(MD_iter,MD_TimeStep*MD_iter,fileE,fileDRC);

    if (ML_flag==0) CompTime[myid0][4] += MD_pac(MD_iter,argv[1]);

    MD_iter++;

  } while(MD_Opt_OK==0 && MD_iter<=MD_IterNumber);

  if ( TRAN_output_hks ) {
    /* left is dummy */
    TRAN_RestartFile(mpi_comm_level1, "write","left",filepath,TRAN_hksoutfilename);
  }

  /****************************************************
               calculate Voronoi charge
  ****************************************************/
 
  if (Voronoi_Charge_flag==1) Voronoi_Charge();

  /****************************************************
  making of a file *.frac for the fractional coordinates
  ****************************************************/

  Make_FracCoord(argv[1]);

  /****************************************************
   generate Wannier functions added by Hongming Weng
  ****************************************************/

  /* hmweng */
  if(Wannier_Func_Calc){
    if (myid0==Host_ID) printf("Calling Generate_Wannier...\n");fflush(0);

    Generate_Wannier(argv[1]);
  }

  /****************************************************
                  Making of output files
  ****************************************************/

  CompTime[myid0][20] = OutData(argv[1]);

  /****************************************************
    write connectivity, Hamiltonian, overlap, density
    matrices, and etc. to a file, filename.scfout 
  ****************************************************/

  if (HS_fileout==1) SCF2File("write",argv[1]);

  /* elapsed time */

  dtime(&TEtime);
  CompTime[myid0][0] = TEtime - TStime;
  Output_CompTime();
  for (i=0; i<numprocs0; i++){
    free(CompTime[i]);
  }
  free(CompTime);

  /* merge log files */

  Merge_LogFile(argv[1]);

  /* free arrays */

  Free_Arrays(0);

  /* print memory */

  PrintMemory("total",0,"sum");

  /****************************************************
         reconstruct the original MPI group
  ****************************************************/

  {
    int *new_ranks; 
    MPI_Group  new_group,old_group; 

    new_ranks = (int*)malloc(sizeof(int)*numprocs0);
    for (i=0; i<numprocs0; i++) {
      new_ranks[i]=i; /* a new group is made of original rank=0:Pnum[k]-1 */
    }

    MPI_Comm_group(MPI_COMM_WORLD1, &old_group);

    /* define a new group */
    MPI_Group_incl(old_group,numprocs0,new_ranks,&new_group);
    MPI_Comm_create(MPI_COMM_WORLD1,new_group,&mpi_comm_level1);

    MPI_Group_free(&new_group);
    free(new_ranks); /* never forget cleaning! */
  }

  MPI_Barrier(MPI_COMM_WORLD1);
  if (myid0==Host_ID){
    printf("\nThe calculation was normally finished.\n");
  }

  return 0;
}

int stringcomp( const void *a, const void *b)
{
  return strcmp( (char*)a, (char*)b);
}


