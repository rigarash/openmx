Author: Daniel Leidert <dleidert@debian.org>
Description: Fix at least the typos reported by lintian.
Forwarded: no

--- a/source/Generate_Wannier.c
+++ b/source/Generate_Wannier.c
@@ -1425,7 +1425,7 @@
       printf("Using Hybrid Steepest Decent (SD) and Conjugate Gradient (CG) methods for Minimization.\n");
     }
     if(Wannier_Min_Scheme==1 || Wannier_Min_Scheme==2){    
-      printf("In CG: intial search step length for Secant method %10.5f.\n",fabs(Wannier_Min_Secant_StepLength));
+      printf("In CG: initial search step length for Secant method %10.5f.\n",fabs(Wannier_Min_Secant_StepLength));
       printf("In CG: Number of steps for Secant method %i.\n",Wannier_Min_Secant_Steps);  
     }
     printf("Criteria for minimization %e\n",Wannier_Min_Conv_Criterion);
@@ -2631,7 +2631,7 @@
       }
 
       else{
-	printf(" ... ... Writting Mmn_zero(k,b) matrix into file.\n\n");
+	printf(" ... ... Writing Mmn_zero(k,b) matrix into file.\n\n");
 	fprintf(fp,"Mmn_zero(k,b). band_num, kpt_num, bvector num, spinsize\n");
 	fprintf(fp,"%13d%13d%13d%13d\n",BANDNUM,kpt_num,tot_bvector,spinsize);    
       }
@@ -3001,7 +3001,7 @@
     }/* spin */
     /* Then we can find the initial guess for Utilde matrix which is usded for optimizing the omega_Tilde part */
     Getting_Utilde(Amnk, spinsize, kpt_num, WANNUM, WANNUM, Utilde); 
-    /* and update Mmnk matrix to that with intial guess M_opt= Utilde^dagger * M_zero * Utilde(k+b) */
+    /* and update Mmnk matrix to that with initial guess M_opt= Utilde^dagger * M_zero * Utilde(k+b) */
 
     Initial_Guess_Mmnkb(Utilde, spinsize, kpt_num, WANNUM, WANNUM, Mmnkb_zero, Mmnkb_dis, kg, frac_bv, tot_bvector, kplusb, Nk);
     /* Mmnkb_zero now is the disentangled WANNUMxWANNUM overlap matrix */ 
@@ -3010,7 +3010,7 @@
 
   else{ /* NOT disentangle */ 
 
-    /* update Mmnk matrix to that with intial guess M_opt= Utilde^dagger * M_zero * Utilde(k+b) */
+    /* update Mmnk matrix to that with initial guess M_opt= Utilde^dagger * M_zero * Utilde(k+b) */
     Initial_Guess_Mmnkb(Uk, spinsize, kpt_num, BANDNUM, WANNUM, Mmnkb_dis, Mmnkb_zero, kg, frac_bv, tot_bvector, kplusb, Nk); 
     /* Mmnkb_zero now is the disentangled WANNUMxWANNUM overlap matrix */ 
     for(k=0;k<kpt_num;k++){
@@ -4537,7 +4537,7 @@
       printf("* Error in openning file for Amn(k).\n");
       printf("******************************************************************\n");
     }else{
-      printf(" ... ... Writting Amn(k) matrix into file.\n\n");
+      printf(" ... ... Writing Amn(k) matrix into file.\n\n");
       fprintf(fp,"Amn. Fist line BANDNUM, KPTNUM, WANNUM, spinsize. Next is m n k and elements.Spin is the most outer loop.\n");
       fprintf(fp,"%13d%13d%13d%13d\n",band_num,kpt_num,wan_num,spinsize);
     }
--- a/source/Generating_MP_Special_Kpt.c
+++ b/source/Generating_MP_Special_Kpt.c
@@ -406,9 +406,9 @@
   /* Number of primitive unit cell contained in the original lattice */
   int npcell;
   /*cell_parameters is for unit cell's lattice parameters: 
-    cell_parameters[0] lenght of a vector
-    cell_parameters[1] lenght of b vector
-    cell_parameters[2] lenght of c vector
+    cell_parameters[0] length of a vector
+    cell_parameters[1] length of b vector
+    cell_parameters[2] length of c vector
     cell_parameters[3] angle between b and c vector in radian (alpha)
     cell_parameters[4] angle between a and c vector in radian (beta)
     cell_parameters[5] angle between a and b vector in radian (gamma)
@@ -1816,7 +1816,7 @@
 	rlatt[k][1]=rlatt[k][1]-rlatt[(k+1+k%2)%3][1];
 	rlatt[k][2]=rlatt[k][2]-rlatt[(k+1+k%2)%3][2];
 	absv=sqrt(rlatt[k][0]*rlatt[k][0]+rlatt[k][1]*rlatt[k][1]+rlatt[k][2]*rlatt[k][2]);
-	/* printf("%2d-%2d vector: new lenght is %10.5f, old one is %10.5f\n",k,(k+1)%3,absv,abc[k]); */
+	/* printf("%2d-%2d vector: new length is %10.5f, old one is %10.5f\n",k,(k+1)%3,absv,abc[k]); */
 	if(absv>(abc[k]+smallvalue)){
 	  break; /* no search for vector[k]-vector[(k+1k%2)%3], break to + case */
 	}
@@ -1836,7 +1836,7 @@
 	rlatt[k][1]=rlatt[k][1]+rlatt[(k+1+k%2)%3][1];
 	rlatt[k][2]=rlatt[k][2]+rlatt[(k+1+k%2)%3][2];
 	absv=sqrt(rlatt[k][0]*rlatt[k][0]+rlatt[k][1]*rlatt[k][1]+rlatt[k][2]*rlatt[k][2]);
-	/* printf("%2d+%2d vector: new lenght is %10.5f, old one is %10.5f\n",k,(k+1)%3,absv,abc[k]);*/
+	/* printf("%2d+%2d vector: new length is %10.5f, old one is %10.5f\n",k,(k+1)%3,absv,abc[k]);*/
 	if(absv>(abc[k]+smallvalue)){
 	  break;/* no search for vector[k]+vector[(k+1+k%2)%3], break */
 	}
@@ -1857,7 +1857,7 @@
 	rlatt[k][1]=rlatt[k][1]-rlatt[(k+2-k%2)%3][1];
 	rlatt[k][2]=rlatt[k][2]-rlatt[(k+2-k%2)%3][2];
 	absv=sqrt(rlatt[k][0]*rlatt[k][0]+rlatt[k][1]*rlatt[k][1]+rlatt[k][2]*rlatt[k][2]);
-	/* printf("%2d-%2d vector: new lenght is %10.5f, old one is %10.5f\n",k,(k+2)%3,absv,abc[k]);*/
+	/* printf("%2d-%2d vector: new length is %10.5f, old one is %10.5f\n",k,(k+2)%3,absv,abc[k]);*/
 	if(absv>(abc[k]+smallvalue)){
 	  break; /* no search for vector[k]-vector[(k+2-k%2)%3], break to + case */
 	}
@@ -1877,7 +1877,7 @@
 	rlatt[k][1]=rlatt[k][1]+rlatt[(k+2-k%2)%3][1];
 	rlatt[k][2]=rlatt[k][2]+rlatt[(k+2-k%2)%3][2];
 	absv=sqrt(rlatt[k][0]*rlatt[k][0]+rlatt[k][1]*rlatt[k][1]+rlatt[k][2]*rlatt[k][2]);
-	/* printf("%2d+%2d vector: new lenght is %10.5f, old one is %10.5f\n",k,(k+2)%3,absv,abc[k]);*/
+	/* printf("%2d+%2d vector: new length is %10.5f, old one is %10.5f\n",k,(k+2)%3,absv,abc[k]);*/
 	if(absv>(abc[k]+smallvalue)){
 	  break;/* no search for vector[k]+vector[(k+2-k%2)%3], break */
 	}
@@ -2043,7 +2043,7 @@
 	cell_parameters[2]=c/a;
       }		
     }else{/*all angles are equal but not right angle, it would be cF, cI, or hR*/
-      if(fabs(a-b)<smallvalue&&fabs(b-c)<smallvalue){ /*all the vectors' lenght are equal */
+      if(fabs(a-b)<smallvalue&&fabs(b-c)<smallvalue){ /*all the vectors' length are equal */
 	if(fabs(cos(alpha)-1.0/2.0)<smallvalue){/* if all angles are 60 degree, it is Face-centred cubic (cF) */
 	  bravais_type = 3;
 	  cell_parameters[0]=sqrt(2.0)*a;
@@ -2063,7 +2063,7 @@
   }else if(fabs(alpha-beta)<smallvalue){
     if(fabs(alpha-pi/2.0)<smallvalue){/* If two equal angles are right angle, it would be hP, oC or mP */
       if(fabs(a-b)<smallvalue){
-        /*If the two vectors perpendicular and their lenghts are equal, it would be hP or oC instead of mP*/
+        /*If the two vectors perpendicular and their lengths are equal, it would be hP or oC instead of mP*/
 	if(fabs(cos(gamma)+1.0/2.0)<smallvalue){ /*If gamma is 120 degree, it is hP*/
 	  bravais_type = 4;
 	  cell_parameters[0]=a;
@@ -2138,7 +2138,7 @@
        Attention! Generally the lattice vectors are chosen so that alpha=beta
     */
   }else{/* all of the angles are different */
-    if(fabs(a-b)<smallvalue&&fabs(b-c)<smallvalue){/*all the vectors' lenght are equal, oI*/
+    if(fabs(a-b)<smallvalue&&fabs(b-c)<smallvalue){/*all the vectors' length are equal, oI*/
       if(fabs(c*c+a*b*cos(gamma)+a*c*cos(beta)+b*c*cos(alpha))<smallvalue
 	 && (a*a+c*c+2.0*a*c*cos(beta)-(c*c+b*b+2.0*c*b*cos(alpha)))>smallvalue
 	 && (a*a+b*b+2.0*a*b*cos(gamma)-(a*a+c*c+2.0*a*c*cos(beta)))>smallvalue){
--- a/source/Set_Allocate_Atom2CPU.c
+++ b/source/Set_Allocate_Atom2CPU.c
@@ -413,7 +413,7 @@
   if (myid==Host_ID && 1<=MD_iter && 0<level_stdout){
     printf("\n");
     printf("*******************************************************\n"); 
-    printf("  Allocation of atoms to proccesors at MD_iter=%5d     \n", MD_iter );
+    printf("  Allocation of atoms to processors at MD_iter=%5d     \n", MD_iter );
     printf("*******************************************************\n\n"); 
   }
 
